service: ${self:custom.projectName}-employee
frameworkVersion: "3"
useDotEnv: true

custom:
  projectName: ${env:PROJECT_NAME, "offline"}
  webpack:
    webpackConfig: "./webpack.config.js"
    packager: "npm"
    includeModules: false # Use the node_modules from layer instead
  serverless-offline:
    httpPort: 5000
    stage: dev
    noAuth: true
    useInProcess: true
  dotenv:
    path: ..\..\.env.${self:provider.stage, "dev"}
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_DEFAULT_REGION
      - NODE_ENV
      - PYTHONUNBUFFERED
    required:
      env:
        - PROJECT_NAME
        - STAGE
        - POSTGRES_SECRET_NAME
      file: true
  database:
    dev:
      PGPROXY_ENDPOINT:
        "Fn::ImportValue": "${self:custom.projectName}-${self:provider.stage}-RDSProxy:Endpoint"
      PGCREDS: ${ssm:/aws/reference/secretsmanager/${env:POSTGRES_SECRET_NAME}}
      PGDATABASE:
        "Fn::ImportValue": "${self:custom.projectName}-${self:provider.stage}-RDS:DBName"
      PGPORT: 5432
provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "ap-southeast-1"}
  apiGateway:
    restApiId:
      "Fn::ImportValue": "${self:custom.projectName}-${self:provider.stage}-ApiGw:RestApiId"
    restApiRootResourceId:
      "Fn::ImportValue": "${self:custom.projectName}-${self:provider.stage}-ApiGw:RootResourceId"
  environment:
    PROJECT_NAME: ${self:custom.projectName}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    PGPROXY_ENDPOINT: ${self:custom.database.${self:provider.stage}.PGPROXY_ENDPOINT}
    PGUSER: ${self:custom.database.${self:provider.stage}.PGCREDS.username}
    PGDATABASE: ${self:custom.database.${self:provider.stage}.PGDATABASE}
    PGPASSWORD: ${self:custom.database.${self:provider.stage}.PGCREDS.password}
    PGPORT: ${self:custom.database.${self:provider.stage}.PGPORT}
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - docker-compose.yml
    - serverless.yml
    - functions.yml
    - package.json
    - package-lock.json
    - webpack.config.js
    - node_modules/**
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
layers:
  NodeModules:
    name: ${self:service}-${self:provider.stage}-layer
    path: layer
    description: "Service function dependencies"
    compatibleRuntimes:
      - nodejs20.x
    retain: false
functions:
  - ${file(functions.yml)}
