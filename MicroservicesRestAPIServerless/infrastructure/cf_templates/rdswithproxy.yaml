AWSTemplateFormatVersion: "2010-09-09"
Description: RDS PostgreSQL with RDS Proxy Setup (Free Tier)

Parameters:
  ProjectName:
    Description: Name of the project
    Type: String
    Default: johncloud
  Stage:
    Description: An environment name that is prefixed to resource names
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev
  DBName:
    Type: String
    Default: mydb
  DBUsername:
    Type: String
    Default: postgres

Resources:
  # Security Groups
  ProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS Proxy
      VpcId: !ImportValue
        Fn::Sub: ${ProjectName}-${Stage}-Vpc:Id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !ImportValue
            Fn::Sub: ${ProjectName}-${Stage}-Vpc:CIDR
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Stage}-rds-proxy-sg

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL instance
      VpcId: !ImportValue
        Fn::Sub: ${ProjectName}-${Stage}-Vpc:Id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ProxySecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 # Change this to your IP Address
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Stage}-rds-sg

  # Secrets for DB credentials
  # PostgresSecret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties:
  #     Description: Secret for PostgreSQL RDS master user
  #     GenerateSecretString:
  #       SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
  #       GenerateStringKey: password
  #       PasswordLength: 32
  #       ExcludePunctuation: true

  # IAM Role for RDS Proxy
  ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole

  ProxyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RDSProxyPolicy
      Roles:
        - !Ref ProxyRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !GetAtt PostgresDB.MasterUserSecret.SecretArn
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com

  # RDS Instance with IAM authentication enabled
  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: "13.11"
      MasterUsername: !Ref DBUsername
      ManageMasterUserPassword: true
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MaxAllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true
      MonitoringInterval: 0
      EnablePerformanceInsights: false
      BackupRetentionPeriod: 1
      MultiAZ: false
      DeletionProtection: false
      StorageType: gp2
      EnableIAMDatabaseAuthentication: true

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !ImportValue
          Fn::Sub: ${ProjectName}-${Stage}-Vpc:PublicSubnetAId
        - !ImportValue
          Fn::Sub: ${ProjectName}-${Stage}-Vpc:PublicSubnetBId

  # RDS Proxy with IAM authentication
  DBProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: !Sub ${ProjectName}-${Stage}-proxy
      EngineFamily: POSTGRESQL
      RoleArn: !GetAtt ProxyRole.Arn
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !GetAtt PostgresDB.MasterUserSecret.SecretArn
          IAMAuth: REQUIRED # Enable IAM authentication
      VpcSubnetIds:
        - !ImportValue
          Fn::Sub: ${ProjectName}-${Stage}-Vpc:PublicSubnetAId
        - !ImportValue
          Fn::Sub: ${ProjectName}-${Stage}-Vpc:PublicSubnetBId
      VpcSecurityGroupIds:
        - !Ref ProxySecurityGroup
      RequireTLS: true # Required for IAM authentication
      IdleClientTimeout: 1800

  # IAM Role for applications to connect to RDS Proxy
  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  ApplicationRDSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ApplicationRDSPolicy
      Roles:
        - !Sub ${ProjectName}-${Stage}-MicroservicesFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - rds-db:connect
            Resource: !Sub arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser/${PostgresDB}/*

  ProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref DBProxy
      TargetGroupName: default
      DBInstanceIdentifiers:
        - !Ref PostgresDB
    DependsOn: DBProxy

  LambdaRDSProxyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-${Stage}-LambdaRDSProxyPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Statement1
            Effect: Allow
            Action: rds-db:connect
            Resource: !Join
              - /
              - - !Join
                  - ":"
                  - - !Sub arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser
                    - !Select
                      - "6"
                      - !Split
                        - ":"
                        - !GetAtt DBProxy.DBProxyArn
                - "*"
      Roles:
        - !Sub ${ProjectName}-${Stage}-MicroservicesFunctionRole
    DependsOn:
      - DBProxy

Outputs:
  RDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt PostgresDB.Endpoint.Address
    Export:
      Name: !Sub ${ProjectName}-${Stage}-RDS:Endpoint
  RDSProxyEndpoint:
    Description: RDS Proxy Endpoint
    Value: !GetAtt DBProxy.Endpoint
    Export:
      Name: !Sub ${ProjectName}-${Stage}-RDSProxy:Endpoint
  DBName:
    Description: Database Name
    Value: !Ref DBName
    Export:
      Name: !Sub ${ProjectName}-${Stage}-RDS:DBName
  RDSSecretArn:
    Description: ARN of the PostgreSQL secret
    Value: !GetAtt PostgresDB.MasterUserSecret.SecretArn
    Export:
      Name: !Sub ${ProjectName}-${Stage}-RDS:SecretArn

  RDSSecretName:
    Description: Name of the PostgreSQL secret
    Value: !Select
      - 6
      - !Split
        - ":"
        - !GetAtt PostgresDB.MasterUserSecret.SecretArn
    Export:
      Name: !Sub ${ProjectName}-${Stage}-RDS:SecretName
