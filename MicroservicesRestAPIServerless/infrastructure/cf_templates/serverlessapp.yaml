AWSTemplateFormatVersion: "2010-09-09"
Description: RESTFul API gateway and authorizer, and microservices lambda role
  for serverless application

Parameters:
  ProjectName:
    Description: Name of the project
    Type: String
    Default: johncloud
  Stage:
    Description: An environment name that is prefixed to resource names
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${Stage}-CognitoUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: false
        - Name: preferred_username
          Required: false
          Mutable: false
        - Name: name
          Required: true
          Mutable: true
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${ProjectName}-${Stage}-Client
      GenerateSecret: true
      RefreshTokenValidity: 30
      CallbackURLs:
        - http://localhost:4200/dashboard
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${ProjectName}app-${Stage}
      UserPoolId: !Ref CognitoUserPool

  # REST API gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ProjectName}-${Stage}-RestApiGw
      MinimumCompressionSize: 0
      EndpointConfiguration:
        Types:
          - EDGE

  RestApiCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  # Microservices Lambda Function Execution Role
  MicroservicesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Stage}-MicroservicesFunctionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole

  # Security Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for microservices lambda functions
      GroupName: WebSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${ProjectName}-${Stage}-Vpc:Id

Outputs:
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Description: Cognito User Pool ID
    Export:
      Name: !Join
        - ":"
        - - !Sub ${ProjectName}-${Stage}-CognitoUserPool
          - Id
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Description: Cognito User Pool Client ID
    Export:
      Name: !Join
        - ":"
        - - !Sub ${ProjectName}-${Stage}-CognitoUserPoolClient
          - Id
  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Description: Cognito User Pool ARN
    Export:
      Name: !Join
        - ":"
        - - !Sub ${ProjectName}-${Stage}-CognitoUserPool
          - Arn

  RestApi:
    Value: !Ref RestApi
    Export:
      Name: !Sub ${ProjectName}-${Stage}-ApiGw:RestApiId
  RestApiRootResourceId:
    Value: !GetAtt RestApi.RootResourceId
    Export:
      Name: !Sub ${ProjectName}-${Stage}-ApiGw:RootResourceId
  RestApiCognitoAuthorizerId:
    Value: !Ref RestApiCognitoAuthorizer
    Export:
      Name: !Sub ${ProjectName}-${Stage}-ApiGw:CognitoAuthorizerId

  MicroservicesFunctionRoleArn:
    Value: !GetAtt MicroservicesFunctionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Stage}-MicroservicesFunctionRole:Arn

  WebSecurityGroup:
    Value: !Ref WebSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-${Stage}-Vpc:WebSecurityGroupId

Metadata:
  AWS::Composer::Groups:
    Group1:
      Label: Cognito User Pool
      Members:
        - CognitoUserPoolClient
        - CognitoUserPool
        - CognitoUserPoolDomain
    Group2:
      Label: API
      Members:
        - RestApi
        - RestApiCognitoAuthorizer
