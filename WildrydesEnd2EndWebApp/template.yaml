Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${AWS::StackName}-${ResourceName}
        - ResourceName: RestApi
      StageName: Dev
      DefinitionBody: !Transform
        Name: AWS::Include
        Parameters:
          Location: backend/api.yaml
      EndpointConfiguration: EDGE
      TracingEnabled: false
      Auth:
        Authorizers:
          WildrydesAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type, X-Amz-Date, Authorization, X-Api-Key,
          X-Amz-Security-Token'''
  RequestUnicornFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RequestUnicornFunction
      CodeUri: backend/functions/RequestUnicorn
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 6
      Tracing: Active
      Environment:
        Variables:
          RIDES_TABLE_NAME: !Ref Rides
          RIDES_TABLE_ARN: !GetAtt Rides.Arn
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Rides
      Layers:
        - !Ref FunctionsLayer
      Events:
        RestApiPOSTride:
          Type: Api
          Properties:
            Path: /ride
            Method: POST
            RestApiId: !Ref RestApi
  RequestUnicornFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RequestUnicornFunction}
  Rides:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: RideId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: RideId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  FunctionsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: FunctionsLayer
      ContentUri: backend/layers/nodejs
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WildrydesAppBucket.RegionalDomainName
            Id: myS3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
  WildrydesAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-app-bucket-${AWS::AccountId}
  WildrydesAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WildrydesAppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${WildrydesAppBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}
Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref WildrydesAppBucket
  DistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref Distribution
  DistributionDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt Distribution.DomainName
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: User Authentication
      Members:
        - UserPoolClient
        - UserPool
    Group2:
      Label: Compute
      Members:
        - FunctionsLayer
        - RequestUnicornFunction
    Group3:
      Label: Databases
      Members:
        - Rides
    Group4:
      Label: Client
      Members:
        - Distribution
        - WildrydesAppBucket
        - CloudFrontOriginAccessControl