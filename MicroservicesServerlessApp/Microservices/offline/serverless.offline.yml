service: offline
frameworkVersion: "3"

custom:
  projectName: ${env:PROJECT_NAME, "fallback"}
  serverless-offline:
    httpPort: 4000
    stage: dev
    noAuth: true
    useInProcess: true
  dotenv:
    path: ../.env.${self:provider.stage, "dev"}
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_DEFAULT_REGION
      - NODE_ENV
      - PYTHONUNBUFFERED
    required:
      env:
        - PROJECT_NAME
        - STAGE
      file: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "ap-southeast-1"}
  apiGateway:
    restApiId:
      "Fn::ImportValue": "${self:custom.projectName}-${self:provider.stage}-ApiGw:RestApiId"
    restApiRootResourceId:
      "Fn::ImportValue": "${self:custom.projectName}-${self:provider.stage}-ApiGw:RootResourceId"
  environment:
    PROJECT_NAME: ${self:custom.projectName}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}

package:
  excludeDevDependencies: false
  exclude:
    - serverless.yml
    - serverless.offline.yml
    - functions.yml
    - package.json
    - package-lock.json
    - node_modules/**

resources:
  Resources:
    # offline resources here

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

functions:
